name: Auto-merge PRs
on:
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - 'Contributors.md' # <- only run if only contributors file changed
    
jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Check if PR only modifies Contributors.md
        id: is_only_contributors_file_changed
        run: |
          # Get a list of files changed in the pull request
          PR_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          FILES_CHANGED=$(echo $PR_FILES | tr '\n' ' ')

          echo "files_changed=$FILES_CHANGED" >> $GITHUB_ENV
          
          if [[ "${FILES_CHANGED// /}" == "Contributors.md" ]]; then

            echo "only_contributors=true" >> $GITHUB_ENV
          else
            echo "only_contributors=false" >> $GITHUB_ENV
          fi

      - name: Check if PR has only one line change
        run: |
          ADDITIONS=${{ github.event.pull_request.additions }}
          DELETIONS=${{ github.event.pull_request.deletions }}

          echo "additions=$ADDITIONS" >> $GITHUB_ENV
          echo "deletions=$DELETIONS" >> $GITHUB_ENV

          if [[ $ADDITIONS == 1 && $DELETIONS == 0 ]]; then
            echo "one_line_change=true" >> $GITHUB_ENV
          elif [[ $ADDITIONS == 2 && $DELETIONS == 1 ]]; then
            echo "one_line_change=true" >> $GITHUB_ENV
          else
            echo "one_line_change=false" >> $GITHUB_ENV
          fi

      # Merge the pull request if it only modifies the Contributors.md file or if it fail to do then drop failure message as post 
      - name: Merge PR
        id: merge_pr
        if: env.only_contributors == 'true' && env.one_line_change == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
            // Attempt to merge the pull request using the squash method
             const response = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
               merge_method: "squash"
             })

            // Check if the merge was successful by checking the status code of the response
             if (response.status === 200) {

                const celebrationGifs = [
                  'https://media2.giphy.com/media/IwAZ6dvvvaTtdI8SD5/giphy.gif',
                  'https://media1.giphy.com/media/artj92V8o75VPL7AeQ/giphy.gif',
                  'https://media1.tenor.com/m/0Sh7u1lRsyEAAAAd/wedding-crasher-hro.gif',
                  'https://media1.tenor.com/m/BfojNsJKhncAAAAd/christmas-eve-merry-christmas-eve.gif',
                  'https://media.tenor.com/SLglGuVqz4oAAAAj/cat-jumping-catjump.gif',
                  'https://media1.tenor.com/m/z2_J71j8AW4AAAAd/running-man-afc-richmond.gif',
                  'https://media1.tenor.com/m/h4CmpoXfzD4AAAAd/little-superstar.gif',
                  'https://media1.tenor.com/m/5U8fNIwMzroAAAAd/skeleton-dance.gif',
                  'https://media1.tenor.com/m/jwaVNAudYdAAAAAd/dance-happy.gif',
                  'https://media1.tenor.com/m/do5LmLFK61EAAAAd/friends.gif',
                  'https://media1.tenor.com/m/TbTe1Nc6j34AAAAd/hacker-hackerman.gif',
                  'https://media1.tenor.com/m/DgVKajDqgoUAAAAd/okay.gif',
                  'https://media1.giphy.com/media/LZElUsjl1Bu6c/giphy.gif',
                ]

                const getRandomGif = () => celebrationGifs[Math.floor(Math.random() * celebrationGifs.length)]

                // social media links
                const web_url = 'https://github.com/orgs/cpfiuna/repositories';
                const codeContributionsLink = 'https://github.com/cpfiuna/contribuciones-de-codigo'

                const getMergeMessage = (username) => {
                  const greeting = `¡Hola @${username}, felicitaciones! Has hecho exitosamente un pull request. 🎉`;
                  const starRepoMessage = `Si te gustó el tutorial, por favor dale una estrella a este repositorio haciendo clic en el botón de estrella en la esquina superior derecha de esta página.\n <img alt="star screenshot" title="star button" src="https://cpfiuna.github.io/recursos/mi-primer-pr/images/star.png">`;

                    const nextSteps = `# Próximos pasos\n - Sigue contribuyendo: Si buscas proyectos para contribuir, revisa [nuestros repositorios](${web_url}).\n - Si querés más práctica revisá [contribuciones de código](${codeContributionsLink}).\n `;
                  const feedbackMessage = `Nos encantaría conocer tu opinión sobre este proyecto. Cuéntanos cómo podemos mejorar comentando o abriendo un issue aquí.`;
                  
                  const gif = `![gif de celebración](${getRandomGif()})`;

                  return `${greeting}\n\n${starRepoMessage}\n\n${nextSteps}\n\n${feedbackMessage}\n\n${gif}`;
                }

                // Generate the merge message using the getMergeMessage function
                const message = getMergeMessage(context.payload.pull_request.user.login);

                // post a comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: message
                })

             } else {
              
              // Post a comment on the pull request using the createComment method
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: "Ocurrió un error al intentar fusionar este pull request. Por favor, revisa el registro de GitHub Actions para más información."
               })
            }
             } catch (error) {

              let errMsg = "";
              console.error("Error merging pull request:", error.message);

              // Manejar casos de error específicos según el código de estado
              if (error.status === 405 && error.response.data.message === "Pull Request is not mergeable") {

                errMsg = `Hola @${context.payload.pull_request.user.login}, gracias por tu pull request. Apreciamos tu contribución al proyecto. Sin embargo, antes de poder fusionarlo, existe un conflicto de fusión con la rama de destino.  \n\n ¡No te preocupes! Puedes seguir [esta guía](https://github.com/firstcontributions/first-contributions/blob/main/docs/additional-material/git_workflow_scenarios/resolving-merge-conflicts.md) para resolver conflictos de fusión. 
                Una vez que hayas resuelto los conflictos y subido tus cambios, el repositorio verificará los cambios realizados y procederá con la fusión si todo está correcto.  \n\n Si tienes alguna pregunta o necesitas ayuda adicional, no dudes en contactarnos. ¡Estamos aquí para ayudarte!`

              } else if (error.status === 409) {
                console.error("El pull request tiene conflictos con la rama de destino. Resuelve los conflictos antes de fusionar.");
                errMsg = "El pull request tiene conflictos con la rama de destino. Resuelve los conflictos antes de fusionar.";

              } else {
                console.error("Ocurrió un error al fusionar el pull request.");
                errMsg = "Ocurrió un error al fusionar el pull request.";
              }

              // Post a comment on the pull request using the createComment method
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errMsg
               })

              // Set GitHub Action as failed
              core.setFailed(error.message);
            }

      # Post a comment on the pull request if it was not merged automatically
      - name: Post comment on PR if not merged automatically
        # Check if the pull request only modifies the CONTRIBUTORS.md file
        if: env.only_contributors != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            // get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })

            // find any comment already made by the bot.                                                                                                    
            const botComment = comments.find(comment => comment.user.login === 'github-actions[bot]')                                                                       

            const body = `Gracias por tu pull request. Este pull request contiene cambios en archivos que requieren revisión. Los siguientes archivos fueron modificados:\n\n  ${process.env.files_changed.trim() ? `\n\n${process.env.files_changed.trim().split(' ').map(file => `- ${file}`).join('\n')}` : ''}`

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              })
            } else {
                await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
            
          github-token: ${{ secrets.GITHUB_TOKEN }}
